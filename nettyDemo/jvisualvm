jdk自带有个jvisualvm工具、该工具是用来监控java运行程序的cpu、内存、线程等的使用情况

I/o概念

内核区，用户区
文件描述 fd

数据先进入内核的缓存区 ，再由内核缓存区复制到应用程序的缓冲区

1)bio
  读写操作都是阻塞的，当读的时候，会一直阻塞在等待把内核中的缓存复制到应用程序的缓存中
2)nio  event driver IO
 select/poll   把一个和多个fd传递给select,阻塞在select上，select/poll就可以监听多个fd是否就绪，select不知道是什么状态的就绪 顺序扫描遍历fd
 epoll         epool是基于事件驱动的方式代替顺序扫描       java的selector 的实现
3)aio
 告知内核启动某个操作并让内核在整个操作完成后通知应用程序

 
 
 
 java nio  组件
 
 channels
 buffers
 selector
 
 
 channel 和 buffer
 
 nio从channel开始     channel 写入buffer      channel也可以从buffer中读
 
 channel
 FileChannel
 DatagramChannel
 SocketChannel
 ServerSocketChannel  监听tcp，每接受一个客户端创建一个 SocketChannel
 
 buffer
 ByteBuffer
 DoubleBuffer
 CharBuffer
 IntBuffer
 FloatBuffer
 LongBuffer
 ShortBuffer
 
 selector
 Selector允许单线程处理多个channel,把channel注册到Selector上
 事件类型
 OP_ACCEPT  服务端接受客户端的连接事件
 OP_CONNECT 客户端连接服务端事件
 OP_READ    读事件
 OP_WRITE   写事件
 
 
 buffer
 读写步骤
 1.把数据写入到Buffer
 2.调用filp方法 (切换读写模式)
 3.从Buffer中读取数据
 4.调用clear方法和compact方法 清空缓存
 
 buffer的属性
 capacity,position 和 limit
 
 position 和 limit 读写模式下不同，capacity不变
 
 capacity  buffer的大小
 position  当写数据时代表当前的位置，初始为0，写入会移动到下一个可写的buffer 最大为capacity-1
                                  当读数据表示指定位置读，当从写模式切换到读模式，position 重置为0
 limit      写模式 代表能写多少  limit ==capacity
                                    读模式 代表能读多少  limit ==写模式的position
                                    
buffer的方法
filp() 从写模式切换到读模式   position=0，limit==写模式的position
rewind() 将 position=0，limit不变从新读取数据
clear()  清理所有数据
compact() 清理读过的数据，未读的数据移动buffer前面
mark()    标记buffer中的一个特定的position  reset()可以恢复到这个position


selector

1.Selector.open()创建Selector
2.channel注册到Selector channel必须是非阻塞的
 注册指定感兴趣的事件
 OP_ACCEPT  服务端接受客户端的连接事件
 OP_CONNECT 客户端连接服务端事件
 OP_READ    读事件
 OP_WRITE   写事件
 channel注册到Selector 返回SelectorKey
 SelectorKey的属性
 ready集合  通道已经就绪的集合
 channel
 3.Selector.select()阻塞
  selector.seletedKeys() 返回 已经就绪的channel
  selectionKey.isAcceptable()
  selectionKey.isConnectable()
  selectionKey.isReadable()
  selectionKey.isWritable()
  检查那种事件就绪
 4.selector.close()关闭selector 但是channel不关闭
 
 SocketChannel
 socketChannel.open()
 
 socketChannel.connect() 该方法在建立连接之前就返回了，可以socketChannel.finishConnect() 检查
 socketChannel.close()
 
 
 ServerSocketChannel
 
 Java NIO非堵塞技术实际是采取反应器模式
  
  
  
  
  
  
Http 协议

请求消息

请求头
请求行
请求正文

请求头：  请求方法         路径       版本  CRLF(回车换行)


响应消息:

状态行
响应头
响应正文


响应行:  版本    状态      reason-parse  CRLF



单播      一对一   
多播（组播） 一对一组
广播          一对所有


局域网的分类：以太网、令牌环网、FDDI、ATM、WLAN
 
以太网 EtherNet
一台主机要想发送信息，就要先监听主干线路上有没有其它主机也在发送信息，如果有它就等一个随机时间再监听，直到信息发送成功；其它主机则都可以收到这个主机发送的数据包，然后检查是不是发给自己的，不是则丢弃；
 
其介质访问控制协议采用的是CSMA/CD（Carrier Sense Multiple Access/Collision Detect）即：载波监听多路访问/冲突检测机制；
 
其使用IEEE 802.3标准
 
令牌环网
 
令牌环网的结构是一个环形，环中存在一个令牌，令牌在环中循环依次传递，环中主机只有在自已拿到令牌时才能向主线路中发数据；
 
其使用IEEE 802.5标准

FDDI(Fiber Distributed Data Interface)(光纤分布式数据接口)
FDDI的访问方法与令牌环网的访问方法类似，在网络通信中均采用“令牌”传递。它与标准的令牌环又有所不同，主要在于FDDI使用定时的令牌访问方法。
FDDI令牌沿网络环路从一个结点向另一个结点移动，如果某结点不需要传输数据，FDDI将获取令牌并将其发送到下一个结点中。
如果处理令牌的结点需要传输，那么在指定的称为“目标令牌循环时间”（Target Token Rotation Time，TTRT）的时间内，它可以按照用户的需求来发送尽可能多的帧。
FDDI采用的是定时的令牌方法，所以在给定时间中，来自多个结点的多个帧可能都在网络上，以为用户提供高容量的通信。

FDDI可以发送两种类型的包：同步的和异步的。同步通信用于要求连续进行且对时间敏感的传输（如音频、视频和多媒体通信）；异步通信用于不要求连续脉冲串的普通的数据传输。
在给定的网络中，TTRT等于某结点同步传输需要的总时间加上最大的帧在网络上沿环路进行传输的时间。FDDI使用两条环路，所以当其中一条出现故障时，
数据可以从另一条环路上到达目的地。连接到FDDI的结点主要有两类，即A类和B类。A类结点与两个环路都有连接，由网络设备如集线器等组成，
并具备重新配置环路结构以在网络崩溃时使用单个环路的能力；B类结点通过A类结点的设备连接在FDDI网络上，B类结点包括服务器或工作站等。
 
ATM（Asynchronous Transfer Mode）（异步传输模式）
ATM是一种较新型的单元交换技术，同以太网、令牌环网、FDDI网络等使用可变长度包技术不同，ATM使用53字节固定长度的单元进行交换。
它是一种交换技术，它没有共享介质或包传递带来的延时，非常适合音频和视频数据的传输。ATM主要具有以下优点：    
（1） ATM使用相同的数据单元，可实现广域网和局域网的无缝连接。   （2） ATM支持VLAN（虚拟局域岗）功能，可以对网络进行灵活的管理和配置。
（3） ATM具有不同的速率，分别为25、51、155、622Mbps，从而为不同的应用提供不同的速率。 
ATM是采用“信元交换”来替代“包交换”进行实验，发现信元交换的速度是非常快的。
信元交换将一个简短的指示器称为虚拟通道标识符，并将其放在TDM（时分复用模式）时间片的开始。这使得设备能够将它的比特流异步地放在一个ATM通信通道上，
使得通信变得能够预知且持续的，这样就为时间敏感的通信提供了一个预QoS（Quality of Service，服务质量），这种方式主要用在视频和音频上。
通信可以预知的另一个原因是ATM采用的是固定的信元尺寸。ATM通道是虚拟的电路，并且MAN传输速度能够达到10Gbps。  

---分时多工是一种数字的或者模拟（较罕见）的多路复用技术。使用这种技术，两个以上的信号或数据流可以同时在一条通信线路上传输，
其表现为同一通信信道的子信道。但在物理上来看，信号还是轮流占用物理通道的。时间域被分成周期循环的一些小段，每段时间长度是固定的，
每个时段用来传输一个子信道。例如子信道1的采样，可能是字节或者是数据块，使用时间段1，子信道2使用时间段2，等等。
一个TDM的帧包含了一个子信道的一个时间段，当最后一个子信道传输完毕，这样的过程将会再重复来传输新的帧，也就是下个信号片段。
---QOS是什么？QoS的英文全称为"Quality of Service"，中文名为"服务质量"。
QoS是网络的一种安全机制, 是用来解决网络延迟和阻塞等问题的一种技术。现在的路由器一般均支持QoS。
WLAN(Wireless Local Area Network)（无线局域网）
它利用射频（Radio Frequency； RF）的技术，使用电磁波
  
 
 
 HTTP的神器 Fiddler和Charles debugger
 
 wireshark
 
 
 数据链路层则负责 MAC地址
 网络层负责 IP地址
路由器 工作在 网络层  
数据链路层设备（如交换机）
IP和MAC地址这种映射关系由ARP（Address Resolution Protocol，地址解析协议）协议完成。
 
 
 
 
 Keytool 是一个Java数据证书的管理工具 ,Keytool将密钥（key）和证书（certificates）存在一个称为keystore的文件中在keystore里，包含两种数据:密钥实体（Key entity）-密钥（secret key）或者是私钥和配对公钥（采用非对称加密）可信任的证书实体（trusted certificate entries）-只包含公钥.
JDK中keytool常用参数说明（不同版本有差异，详细可参见【附录】中的官方文档链接）:

-genkey 在用户主目录中创建一个默认文件”.keystore”,还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书(在没有指定生成位置的情况下,keystore会存在用户系统默认目录)
-alias 产生别名 每个keystore都关联这一个独一无二的alias，这个alias通常不区分大小写
-keystore 指定密钥库的名称(产生的各类信息将不在.keystore文件中)
-keyalg 指定密钥的算法 (如 RSA DSA，默认值为：DSA)
-validity 指定创建的证书有效期多少天(默认 90)
-keysize 指定密钥长度 （默认 1024）
-storepass 指定密钥库的密码(获取keystore信息所需的密码)
-keypass 指定别名条目的密码(私钥的密码)
-dname 指定证书发行者信息 其中： “CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名 称,ST=州或省份名称,C=单位的两字母国家代码”
-list 显示密钥库中的证书信息 keytool -list -v -keystore 指定keystore -storepass 密码
-v 显示密钥库中的证书详细信息
-export 将别名指定的证书导出到文件 keytool -export -alias 需要导出的别名 -keystore 指定keystore -file 指定导出的证书位置及证书名称 -storepass 密码
-file 参数指定导出到文件的文件名
-delete 删除密钥库中某条目 keytool -delete -alias 指定需删除的别 -keystore 指定keystore – storepass 密码
-printcert 查看导出的证书信息 keytool -printcert -file g:\sso\michael.crt
-keypasswd 修改密钥库中指定条目口令 keytool -keypasswd -alias 需修改的别名 -keypass 旧密码 -new 新密码 -storepass keystore密码 -keystore sage
-storepasswd 修改keystore口令 keytool -storepasswd -keystore g:\sso\michael.keystore(需修改口令的keystore) -storepass pwdold(原始密码) -new pwdnew(新密码)
-import 将已签名数字证书导入密钥库 keytool -import -alias 指定导入条目的别名 -keystore 指定keystore -file 需导入的证书
 
 
 CA
 
 -Djavax.net.debug=ssl,handshake
 
 第三方CA  可以使用 opensll 生成
 
 
 